import { writeFile, mkdir } from 'fs/promises';
import path from 'path';

const CHECKED_DIR = './checked';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –≤ —Ñ–ª–∞–≥
function getFlagEmoji(countryCode) {
    if (!countryCode || countryCode.length !== 2) {
        return '‚ùì';
    }
    const codePoints = countryCode
        .toUpperCase()
        .split('')
        .map(char => 127397 + char.charCodeAt(0));
    return String.fromCodePoint(...codePoints);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ—Ä–≤–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–∏–º
function isRussianServer(proxy) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ country
    if (proxy.country === '–†–æ—Å—Å–∏—è') return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥
    if (proxy.flag === 'üá∑üá∫') return true;
    
    // –ï—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ checks
    if (!proxy.country && !proxy.flag && proxy.checks && proxy.checks.length > 0) {
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π check —Å country
        for (let i = proxy.checks.length - 1; i >= 0; i--) {
            const check = proxy.checks[i];
            if (check.country) {
                return check.country === 'RU';
            }
        }
    }
    
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
function createCustomName(proxy) {
    let flag = proxy.flag || '';
    let country = proxy.country || '';
    let countryCode = proxy.country_code || '';
    let serverNumber = proxy.serverNumber || 1;
    let purpose = proxy.purpose || '';
    let isPro = proxy.isPro || false;
    let provider = proxy.provider || 'unknown';
    
    // –ï—Å–ª–∏ —Ñ–ª–∞–≥ –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ check
    if (!flag && proxy.checks && proxy.checks.length > 0) {
        for (let i = proxy.checks.length - 1; i >= 0; i--) {
            const check = proxy.checks[i];
            if (check.country) {
                flag = getFlagEmoji(check.country);
                if (!country) {
                    country = check.country;
                }
                break;
            }
        }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ñ–ª–∞–≥–∞
    if (!flag) flag = '‚ùì';
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
    if (!country && countryCode) {
        country = countryCode;
    } else if (!country) {
        country = 'Unknown';
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    let name = `${flag}${country}#${serverNumber}`;
    
    if (purpose) {
        name += ` ${purpose}`;
    }
    
    name += ' ¬∑';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞—Ñ–∏–∫–µ –¥–ª—è lagomvpn
    if (proxy.provider === 'lagomvpn' && proxy.trafficUsed && proxy.trafficLimit) {
        const used = proxy.trafficUsed.replace(/[^0-9.]/g, '');
        const limit = proxy.trafficLimit.replace(/[^0-9.]/g, '');
        name += ` ${used}/${limit}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å pro- –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (isPro) {
        name += ` pro-${provider}`;
    } else {
        name += ` ${provider}`;
    }
    
    return name;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ —Å –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
function createFormattedLink(proxy) {
    const customName = createCustomName(proxy);
    const encodedName = encodeURIComponent(customName);
    return `${proxy.link}#${encodedName}`;
}

export async function formatAndSaveSubscriptions(database) {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await mkdir(path.join(CHECKED_DIR, 'providers'), { recursive: true });
    await mkdir(path.join(CHECKED_DIR, 'levels'), { recursive: true });
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –ø—Ä–æ–∫—Å–∏
    const workingProxies = database.filter(p => p.status === 'working');
    
    // –î–ª—è lagomvpn –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞
    const lagomProxies = workingProxies.filter(p => p.provider === 'lagomvpn');
    const nonLagomProxies = workingProxies.filter(p => p.provider !== 'lagomvpn');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º lagom –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ç—Ä–∞—Ñ–∏–∫–æ–º
    const lagomByAccount = {};
    lagomProxies.forEach(proxy => {
        const username = proxy.username || 'unknown';
        if (!lagomByAccount[username]) {
            lagomByAccount[username] = [];
        }
        lagomByAccount[username].push(proxy);
    });
    
    let selectedLagomProxies = [];
    for (const [username, proxies] of Object.entries(lagomByAccount)) {
        if (proxies.length > 0) {
            const sample = proxies[0];
            if (sample.trafficUsed && sample.trafficLimit) {
                const usedGB = parseFloat(sample.trafficUsed.replace(/[^0-9.]/g, '')) || 0;
                const limitGB = parseFloat(sample.trafficLimit.replace(/[^0-9.]/g, '')) || 0;
                
                if (limitGB === 0 || usedGB < limitGB) {
                    selectedLagomProxies = selectedLagomProxies.concat(proxies);
                    break; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç
                }
            }
        }
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ–∫—Å–∏
    const finalWorkingProxies = [...nonLagomProxies, ...selectedLagomProxies];
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –∏ –Ω–µ—Ä—É—Å—Å–∫–∏–µ
    const russianProxies = finalWorkingProxies.filter(isRussianServer);
    const nonRussianProxies = finalWorkingProxies.filter(p => !isRussianServer(p));
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
    const byProvider = {};
    const byProviderRu = {};
    const byProviderFull = {};
    
    finalWorkingProxies.forEach(proxy => {
        const provider = proxy.provider || 'unknown';
        const formattedLink = createFormattedLink(proxy);
        
        if (!byProviderFull[provider]) {
            byProviderFull[provider] = [];
        }
        byProviderFull[provider].push(formattedLink);
        
        if (isRussianServer(proxy)) {
            if (!byProviderRu[provider]) {
                byProviderRu[provider] = [];
            }
            byProviderRu[provider].push(formattedLink);
        } else {
            if (!byProvider[provider]) {
                byProvider[provider] = [];
            }
            byProvider[provider].push(formattedLink);
        }
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
    const byLevel = {};
    const byLevelRu = {};
    const byLevelFull = {};
    
    finalWorkingProxies.forEach(proxy => {
        const level = proxy.level || 'unknown';
        const formattedLink = createFormattedLink(proxy);
        
        if (!byLevelFull[level]) {
            byLevelFull[level] = [];
        }
        byLevelFull[level].push(formattedLink);
        
        if (isRussianServer(proxy)) {
            if (!byLevelRu[level]) {
                byLevelRu[level] = [];
            }
            byLevelRu[level].push(formattedLink);
        } else {
            if (!byLevel[level]) {
                byLevel[level] = [];
            }
            byLevel[level].push(formattedLink);
        }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –Ω–µ—Ä—É—Å—Å–∫–∏–µ)
    for (const [provider, links] of Object.entries(byProvider)) {
        const content = links.join('\n');
        const base64Content = Buffer.from(content).toString('base64');
        
        await writeFile(
            path.join(CHECKED_DIR, 'providers', `${provider}.txt`),
            content
        );
        
        await writeFile(
            path.join(CHECKED_DIR, 'providers', `${provider}-base64.txt`),
            base64Content
        );
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ)
    for (const [provider, links] of Object.entries(byProviderRu)) {
        const content = links.join('\n');
        
        await writeFile(
            path.join(CHECKED_DIR, 'providers', `${provider}-ru.txt`),
            content
        );
        
        console.log(`Saved ${links.length} Russian links for provider: ${provider}`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–≤—Å–µ)
    for (const [provider, links] of Object.entries(byProviderFull)) {
        const content = links.join('\n');
        
        await writeFile(
            path.join(CHECKED_DIR, 'providers', `${provider}-full.txt`),
            content
        );
        
        console.log(`Saved ${links.length} total links for provider: ${provider}`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã —É—Ä–æ–≤–Ω–µ–π (—Ç–æ–ª—å–∫–æ –Ω–µ—Ä—É—Å—Å–∫–∏–µ)
    for (const [level, links] of Object.entries(byLevel)) {
        const content = links.join('\n');
        const base64Content = Buffer.from(content).toString('base64');
        
        await writeFile(
            path.join(CHECKED_DIR, 'levels', `${level}.txt`),
            content
        );
        
        await writeFile(
            path.join(CHECKED_DIR, 'levels', `${level}-base64.txt`),
            base64Content
        );
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã —É—Ä–æ–≤–Ω–µ–π (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ)
    for (const [level, links] of Object.entries(byLevelRu)) {
        const content = links.join('\n');
        
        await writeFile(
            path.join(CHECKED_DIR, 'levels', `${level}-ru.txt`),
            content
        );
        
        console.log(`Saved ${links.length} Russian links for level: ${level}`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã —É—Ä–æ–≤–Ω–µ–π (–≤—Å–µ)
    for (const [level, links] of Object.entries(byLevelFull)) {
        const content = links.join('\n');
        
        await writeFile(
            path.join(CHECKED_DIR, 'levels', `${level}-full.txt`),
            content
        );
        
        console.log(`Saved ${links.length} total links for level: ${level}`);
    }
}
